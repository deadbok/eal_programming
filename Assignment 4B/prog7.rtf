{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red136\green136\blue136;\red186\green33\blue33;\red0\green68\blue221;\red102\green102\blue102;\red64\green128\blue128;\red160\green160\blue0;\red25\green23\blue124;\red0\green128\blue0;\red187\green102\blue136;\red187\green102\blue34;\red136\green0\blue0;\red170\green34\blue255;\red153\green153\blue153;\red0\green160\blue0;\red160\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;\red176\green0\blue64;\red0\green0\blue255;\red187\green187\blue187;\red188\green122\blue0;\red0\green0\blue128;\red125\green144\blue41;\red210\green65\blue58;}\f0 {\cf5\i #!/usr/bin/env python}\par
{\cf5\i # -*- coding: utf-8 -*-}\par
{\cf5\i # The above lines tell the shell to use python as interpreter when the}\par
{\cf5\i # script is called directly, and that this file uses utf-8 encoding,}\par
{\cf5\i # because of the country specific letter in my surname.}\par
{\cf2\i '''\par
Name: Program 7\par
Author: Martin Bo Kristensen Gr{\u248}nholdt.\par
Version: 1.0 (2016-12-10)\par
\par
Calculate the amount of money a person would earn over a period of time if his\par
or her salary is one penny the first day, exponentially rising each day.\par
'''}\par
\par
\par
{\cf8\b def} {\cf19 grow_or_pay}(pay{\cf4 =}{\cf4 1}, days{\cf4 =}{\cf4 2}, day{\cf4 =}{\cf4 1}, total{\cf4 =}{\cf4 0}):\par
    {\cf2\i '''\par
    Calculate the amount of pay, doubling the sallery each day.\par
\par
    :param pay: The sallary to base the calculation on.\par
    :param days: The number of days to calculate the salary for,\par
    :param day: The current day.\par
    :return: The total salary.\par
    '''}\par
    {\cf5\i # Print the current results.}\par
    {\cf8\b print}({\cf2 '}{\cf2 \{:12.2f\}}{\cf10\b \\t}{\cf2 |\{:4d\}}{\cf10\b \\t}{\cf2 |\{:16.2f\}}{\cf2 '}{\cf4 .}format(pay, day, total))\par
\par
    {\cf5\i # Check if we're done.}\par
    {\cf8\b if} days {\cf4 ==} day:\par
        {\cf8\b return} (pay)\par
\par
    {\cf5\i # Next step.}\par
    pay {\cf4 *}{\cf4 =} {\cf4 2}\par
    total {\cf4 +}{\cf4 =} pay\par
    day {\cf4 +}{\cf4 =} {\cf4 1}\par
\par
    {\cf5\i # Call again.}\par
    {\cf8\b return} (grow_or_pay(pay, days, day, total))\par
\par
\par
{\cf8\b def} {\cf19 main}():\par
    {\cf2\i '''\par
    Main entry point.\par
    '''}\par
    {\cf5\i # Get number of days, and salary from the user.}\par
    days {\cf4 =} {\cf4 0}\par
    pay {\cf4 =} {\cf4 0}\par
    {\cf8\b try}:\par
        pay {\cf4 =} {\cf8 float}({\cf8 input}({\cf2 '}{\cf2 Input the amount of sallery per day: }{\cf2 '}))\par
        days {\cf4 =} {\cf8 int}({\cf8 input}({\cf2 '}{\cf2 Input the amount of days: }{\cf2 '}))\par
    {\cf8\b except} {\cf24\b ValueError}:\par
        {\cf5\i # Complain when something unexpected was entered.}\par
        {\cf8\b print}({\cf2 '}{\cf10\b \\n}{\cf2 Please use only numbers.}{\cf2 '})\par
        {\cf8 exit}({\cf4 1})\par
\par
    {\cf8\b print}({\cf2 '}{\cf10\b \\n}{\cf2 Daily salery}{\cf10\b \\t}{\cf2 | Day}{\cf10\b \\t}{\cf2 |}{\cf10\b \\t}{\cf2 Total salery}{\cf2 '})\par
    {\cf8\b print}({\cf2 '}{\cf2 --------------------------------------------}{\cf2 '})\par
    total_pay {\cf4 =} grow_or_pay(pay, days)\par
    {\cf8\b print}({\cf2 '}{\cf2 --------------------------------------------}{\cf2 '})\par
    total_pounds {\cf4 =} {\cf8 int}(total_pay {\cf4 /} {\cf4 100})\par
    total_pennies {\cf4 =} total_pay {\cf4 -} (total_pounds {\cf4 *} {\cf4 100})\par
    {\cf8\b print}({\cf2 '}{\cf2 \{:.0f\} pounds and \{:2.0f\} pennies in \{\} days.}{\cf2 '}{\cf4 .}format(total_pounds,\par
                                                                 total_pennies,\par
                                                                 days))\par
\par
\par
{\cf5\i # Run this when invoked directly}\par
{\cf8\b if} __name__ {\cf4 ==} {\cf2 '}{\cf2 __main__}{\cf2 '}:\par
    main()\par
}