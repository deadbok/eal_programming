{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red102\green102\blue102;\red255\green0\blue0;\red0\green128\blue0;\red25\green23\blue124;\red136\green136\blue136;\red128\green0\blue128;\red160\green160\blue0;\red0\green0\blue128;\red186\green33\blue33;\red160\green0\blue0;\red170\green34\blue255;\red64\green128\blue128;\red0\green160\blue0;\red0\green68\blue221;\red125\green144\blue41;\red0\green0\blue255;\red187\green187\blue187;\red176\green0\blue64;\red187\green102\blue34;\red136\green0\blue0;\red187\green102\blue136;\red188\green122\blue0;\red153\green153\blue153;\red210\green65\blue58;}\f0 {\cf12\i # -*- coding: utf-8 -*-}\par
{\cf9\i """\par
Name: Junpier configuration snatcher\par
Author: Martin Bo Kristensen Gr{\u248}nholdt, Rickie Ljungberg, Kasper Soelberg.\par
Version: 1.0 (2017-03-09)\par
\par
Main window.\par
"""}\par
\par
{\cf3\b import} {\cf16\b socket}\par
{\cf3\b import} {\cf16\b sys}\par
{\cf3\b from} {\cf16\b PyQt5.QtWidgets} {\cf3\b import} QWidget, QPushButton, QGridLayout, QApplication, \\\par
    QLabel, QLineEdit, QPlainTextEdit, QInputDialog, QMessageBox\par
{\cf3\b from} {\cf16\b paramiko.ssh_exception} {\cf3\b import} AuthenticationException, \\\par
    BadHostKeyException\par
\par
{\cf3\b from} {\cf16\b vjuniper} {\cf3\b import} VJuniper\par
\par
{\cf3\b class} {\cf16\b MainWindow}(QWidget):\par
    {\cf9\i """\par
    Class encapsulates the main window.\par
    """}\par
\par
    {\cf3\b def} {\cf16 __init__}({\cf3 self}):\par
        {\cf9\i """\par
        Constructor, creates the UI.\par
        """}\par
        {\cf12\i # Call the parent constructor.}\par
        {\cf3 super}(){\cf1 .}__init__()\par
\par
        {\cf12\i # Create the labels.}\par
        ip_label {\cf1 =} QLabel({\cf9 '}{\cf9 Juniper IP address:}{\cf9 '})\par
        file_name_label {\cf1 =} QLabel({\cf9 '}{\cf9 Configuration file name:}{\cf9 '})\par
        config_label {\cf1 =} QLabel({\cf9 '}{\cf9 Configuration:}{\cf9 '})\par
\par
        {\cf12\i # Create the IP and file name edits.}\par
        {\cf3 self}{\cf1 .}__ip_edit {\cf1 =} QLineEdit()\par
        {\cf12\i # self.ip_edit.setInputMask('000.000.000.000')}\par
        {\cf3 self}{\cf1 .}__ip_edit{\cf1 .}setPlaceholderText({\cf9 '}{\cf9 127.0.0.1:22}{\cf9 '})\par
        {\cf3 self}{\cf1 .}__file_name_edit {\cf1 =} QLineEdit()\par
        {\cf3 self}{\cf1 .}__file_name_edit{\cf1 .}setPlaceholderText(\par
            {\cf9 '}{\cf9 Leave empty to only view the config}{\cf9 '})\par
\par
        {\cf12\i # Create the configuration file view.}\par
        {\cf3 self}{\cf1 .}__config_edit {\cf1 =} QPlainTextEdit()\par
        {\cf12\i # Do not allow editing the configuration.}\par
        {\cf3 self}{\cf1 .}__config_edit{\cf1 .}setReadOnly({\cf3 True})\par
\par
        {\cf12\i # Create the buttons}\par
        get_button {\cf1 =} QPushButton({\cf9 "}{\cf9 Get configuration}{\cf9 "})\par
        {\cf12\i # Connect the get config button to the handler.}\par
        get_button{\cf1 .}clicked{\cf1 .}connect({\cf3 self}{\cf1 .}getConfigClicked)\par
\par
        quit_button {\cf1 =} QPushButton({\cf9 "}{\cf9 Quit}{\cf9 "})\par
        {\cf12\i # Close the window on clicking "Quit"}\par
        quit_button{\cf1 .}clicked{\cf1 .}connect({\cf3 self}{\cf1 .}close)\par
\par
        {\cf12\i # Create a grid layout}\par
        grid {\cf1 =} QGridLayout()\par
        grid{\cf1 .}setSpacing({\cf1 10})\par
\par
        {\cf12\i # Place the labels in the top row.}\par
        grid{\cf1 .}addWidget(ip_label, {\cf1 0}, {\cf1 0}, {\cf1 1}, {\cf1 1})\par
        grid{\cf1 .}addWidget(file_name_label, {\cf1 0}, {\cf1 2}, {\cf1 1}, {\cf1 1})\par
\par
        {\cf12\i # Place the edit fields on the next line.}\par
        grid{\cf1 .}addWidget({\cf3 self}{\cf1 .}__ip_edit, {\cf1 1}, {\cf1 0}, {\cf1 1}, {\cf1 2})\par
        grid{\cf1 .}addWidget({\cf3 self}{\cf1 .}__file_name_edit, {\cf1 1}, {\cf1 2}, {\cf1 1}, {\cf1 4})\par
\par
        {\cf12\i # Place the configuration view label on the next line.}\par
        grid{\cf1 .}addWidget(config_label, {\cf1 2}, {\cf1 0})\par
\par
        {\cf12\i # Place the configuration view.}\par
        grid{\cf1 .}addWidget({\cf3 self}{\cf1 .}__config_edit, {\cf1 3}, {\cf1 0}, {\cf1 1}, {\cf1 6})\par
\par
        {\cf12\i # Place the buttons at the second row, with some cells between them for}\par
        {\cf12\i # spacing.}\par
        grid{\cf1 .}addWidget(get_button, {\cf1 4}, {\cf1 3})\par
        grid{\cf1 .}addWidget(quit_button, {\cf1 4}, {\cf1 5})\par
\par
        {\cf12\i # Set the layout of this widget}\par
        {\cf3 self}{\cf1 .}setLayout(grid)\par
\par
        {\cf12\i # Set title}\par
        {\cf3 self}{\cf1 .}setWindowTitle({\cf9 '}{\cf9 Juniper configuration snatcher}{\cf9 '})\par
        {\cf12\i # Show window}\par
        {\cf3 self}{\cf1 .}show()\par
\par
        {\cf12\i # Create the VSRX instance used to talk to the Juniper device.}\par
        {\cf3 self}{\cf1 .}__vjuniper {\cf1 =} VJuniper()\par
\par
    {\cf3\b def} {\cf16 error}({\cf3 self}, msg):\par
        {\cf9\i """\par
        Open a message box for errors.\par
        :param msg: The error message.\par
        """}\par
        {\cf12\i # Create an instance.}\par
        mb {\cf1 =} QMessageBox()\par
        {\cf12\i # Set the window title.}\par
        mb{\cf1 .}setWindowTitle({\cf9 '}{\cf9 Error}{\cf9 '})\par
        {\cf12\i # Set the window content text}\par
        mb{\cf1 .}setText(msg)\par
        {\cf12\i # Show the message box.}\par
        mb{\cf1 .}{\cf3\b exec} ()\par
\par
    {\cf3\b def} {\cf16 getConfigClicked}({\cf3 self}):\par
        {\cf9\i """\par
        Handler that is called when the get config button is clicked\par
        """}\par
        {\cf3\b try}:\par
            {\cf12\i # Get the contents of the IP edit field.}\par
            ip {\cf1 =} {\cf3 self}{\cf1 .}__ip_edit{\cf1 .}text()\par
            {\cf12\i # Split in port number and IP if : is in the input.}\par
            {\cf3\b if} {\cf9 '}{\cf9 :}{\cf9 '} {\cf11\b in} ip:\par
                {\cf12\i # Isolate the port.}\par
                port {\cf1 =} {\cf3 int}(ip{\cf1 .}split({\cf9 '}{\cf9 :}{\cf9 '})[{\cf1 1}])\par
                {\cf12\i # Isolate the IP address}\par
                ip {\cf1 =} ip{\cf1 .}split({\cf9 '}{\cf9 :}{\cf9 '})[{\cf1 0}]\par
            {\cf3\b else}:\par
                port {\cf1 =} {\cf1 22}\par
\par
            {\cf12\i # Default value if the edit field is empty.}\par
            {\cf3\b if} ip {\cf1 ==} {\cf9 '}{\cf9 '}:\par
                ip {\cf1 =} {\cf9 '}{\cf9 127.0.0.1}{\cf9 '}\par
\par
        {\cf12\i # Handle wrong data.}\par
        {\cf3\b except} {\cf24\b ValueError}:\par
            {\cf3 self}{\cf1 .}error({\cf9 '}{\cf9 Error in IP address}{\cf9 '})\par
            {\cf3\b return}\par
\par
        {\cf12\i # Show a dialog to get the login user.}\par
        username, ok {\cf1 =} QInputDialog{\cf1 .}getText({\cf3 self}, {\cf9 '}{\cf9 Enter user name}{\cf9 '},\par
                                            {\cf9 '}{\cf9 Enter user name:}{\cf9 '})\par
        {\cf12\i # Get out if the user pressed cancel.}\par
        {\cf3\b if} {\cf11\b not} ok:\par
            {\cf3\b return}\par
\par
        {\cf12\i # Show dialog to get the login password.}\par
        password, ok {\cf1 =} QInputDialog{\cf1 .}getText({\cf3 self}, {\cf9 '}{\cf9 Enter password}{\cf9 '},\par
                                            {\cf9 '}{\cf9 Enter passwod:}{\cf9 '},\par
                                            QLineEdit{\cf1 .}Password)\par
        {\cf12\i # Get out if the user pressed cancel.}\par
        {\cf3\b if} {\cf11\b not} ok:\par
            {\cf3\b return}\par
\par
        {\cf12\i #Everything has checked out so far, lets talk to the juniper device.}\par
        {\cf3\b try}:\par
            {\cf12\i # Connect to the juniper device.}\par
            {\cf3 self}{\cf1 .}__vjuniper{\cf1 .}connect(ip, port, username{\cf1 =}username, password{\cf1 =}password)\par
            {\cf12\i # Run "show configuration" on the Juniper device and return the}\par
            {\cf12\i # output.}\par
            config {\cf1 =} {\cf3 self}{\cf1 .}__vjuniper{\cf1 .}showConfiguration()\par
        {\cf12\i #Handling of various communication errors.}\par
        {\cf3\b except} AuthenticationException:\par
            {\cf3 self}{\cf1 .}error({\cf9 '}{\cf9 Could not authenticate with the router}{\cf9 '})\par
            {\cf3\b return}\par
        {\cf3\b except}  BadHostKeyException:\par
            {\cf3 self}{\cf1 .}error({\cf9 '}{\cf9 The IP address entered was invalid}{\cf9 '})\par
            {\cf3\b return}\par
        {\cf3\b except} socket{\cf1 .}error:\par
            {\cf3 self}{\cf1 .}error({\cf9 '}{\cf9 Connection error or time out}{\cf9 '})\par
            {\cf3\b return}\par
\par
        {\cf12\i # Put the configuration file in the edit component in the GUI.}\par
        {\cf3 self}{\cf1 .}__config_edit{\cf1 .}setPlainText(config)\par
\par
        {\cf12\i # Save the configurtion to a file, if a file name was entered.}\par
        {\cf3\b try}:\par
            file_name {\cf1 =} {\cf3 self}{\cf1 .}__file_name_edit{\cf1 .}text()\par
            {\cf3\b if} file_name {\cf1 !=} {\cf9 '}{\cf9 '}:\par
                {\cf3\b with} {\cf3 open}(file_name, {\cf9 '}{\cf9 w}{\cf9 '}) {\cf3\b as} config_file:\par
                    config_file{\cf1 .}write(config)\par
        {\cf3\b except} {\cf24\b IOError}:\par
            {\cf3 self}{\cf1 .}error({\cf9 '}{\cf9 Could not save the configuration file}{\cf9 '})\par
}